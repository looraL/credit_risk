        - 
        - import Statistics: quantile
        - import Distributions: Normal
        - 
        - macro varname(variable)
        -     string(variable)
        - end
        - 
        - " Expand S-expression for macro expression "
        - macro msexpr(value)
        -     return quote
        -         Meta.show_sexpr(@macroexpand $(value))
        -     end
        - end
        - 
        - 
        - " Checks array's size is equal to expected, raise ArgumentError otherwise "
        - macro checksize(expected, array)
       48     return quote
        2         actual = size($(esc(array)))
        3         expected = $(esc(expected))
        5         if expected != actual
        4             throw(ArgumentError("""Incorrect dimension for array:
        -                 expected $expected != actual $actual"""))
        -         end
        -     end
        - end
        - 
        - " Inverse of univariate gassian distribution's cumulative distribution function "
        - function invnormcdf(p; μ=0, σ=1)
        -     return quantile(Normal(μ, σ), p)
        - end
        - 
        - " Read 1 float from a line at a time from a file and populates `estimates` "
        - function get_estimates!(estimates::Vector{Float64}, filename::String)
        -     open(filename, "r") do io
        -         for line in eachline(io)
        -             append!(estimates, parse(Float64, line))
        -         end
        -     end
        - end
        - 
        - 
        - " Find difference operator of matrix or vector `B`. Results stored in `A`
        -     ⚈ no allocation
        -     ⚈ no array bound checcking
        - "
        - function diff!(A::AbstractMatrix, B::AbstractMatrix; dims::Integer)
      400     if dims == 1
        0         for i=1:size(A,1)-1
        0             for j=1:size(A,2)
        0                 @inbounds A[i,j] = B[i+1,j] - B[i,j]
        -             end
        -         end
      200     elseif dims == 2
      200         for i=1:size(A,1)
   500000             for j=1:size(A,2)-1
  2000000                 @inbounds A[i,j] = B[i,j+1] - B[i,j]
        -             end
        -         end
        -     else
        0         throw(ArgumentError("dimension must be 1 or 2, got $dims"))
        -     end
        - end
        - 
